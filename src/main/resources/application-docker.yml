spring:
  application:
    name: conductor-boot-wrapper-secure
  main:
    allow-bean-definition-overriding: true
  datasource:
    url: jdbc:mysql://${MYSQL_DATABASE_HOST}:${MYSQL_DATABASE_PORT}/${MYSQL_DATABASE}?createDatabaseIfNotExist=true&autoReconnect=true&verifyServerCertificate=false&useSSL=false
    username: ${MYSQL_USER}
    password: ${MYSQL_PASSWORD}
    driver-class-name: com.mysql.cj.jdbc.Driver
    tomcat:
      test-while-idle: true
      validation-query: SELECT 1
    initialization-mode: never
    platform: mysql
  jpa:
    properties:
      hibernate:
        dialect: org.hibernate.dialect.MySQL5Dialect
      ddl-auto: validate
  flyway:
    baseline-on-migrate: true
    locations:
    - classpath:db/migration

server:
  port: 2048
  use-forward-headers: true
  ssl:
    key-store-type: PKCS12
# The path to the keystore containing the certificate
    key-store: classpath:keystore/my.p12
# The password used to generate the certificate
    key-store-password: conductor
# The alias mapped to the certificate
    key-alias: my
    enabled: false

check-user-scopes: true
awaitTermination: 3000

MYSQL_DATABASE: conductor
MYSQL_USER: conductor
MYSQL_PASSWORD: conductor
MYSQL_DATABASE_HOST: mysql_db
MYSQL_DATABASE_PORT: 3306
AAASERVER_HOST: aaaserver
AAASERVER_PORT: 1024

wrapper_db: mysql
db: mysql

conductor:
  startup:
    default: true
  jetty:
    server:
      port: 1987
  mysql:
    connection:
      timeout: 18000000
      idle:
        timeout: 31536000 
      pool:
        idle:
          min: 2
        size:
          max: 10000
#workflow:
#  elasticsearch:
#    instanceType: EXTERNAL
#    url: http://localhost:9200
jdbc:
  username: ${spring.datasource.username}
  password: ${spring.datasource.password}

logbook:
  filter:
    enabled: true
  write:
    level: info
    chunk-size: 10000
  format:
    style: splunk
  exclude: [/actuator/**, /v3/api-docs/**, /swagger-ui/**, /index.html, /images/**, /swagger-ui.js, /lib/**, /css/**, /api/swagger.json]
  strategy: body-only-if-status-at-least
  minimum-status: 400

zuul:
  add-proxy-headers: true
  add-host-header: true
  ssl-hostname-validation-enabled: false
  sensitive-headers:
  - Authorization
  routes:
    conductor-index:
      path: /
      url: http://localhost:${conductor.jetty.server.port}
      retryable: true
    conductor-html:
      path: /index.html
      url: http://localhost:${conductor.jetty.server.port}
      retryable: true
      strip-prefix: false
    conductor-swagger-json:
      path: /api/swagger.json
      url: http://localhost:${conductor.jetty.server.port}
      retryable: true
      strip-prefix: false
    conductor-swagger-images:
      path: /images/**
      url: http://localhost:${conductor.jetty.server.port}
      retryable: true
      strip-prefix: false
    conductor-swagger-lib:
      path: /lib/**
      url: http://localhost:${conductor.jetty.server.port}
      retryable: true
      strip-prefix: false
    conductor-swagger-css:
      path: /css/**
      url: http://localhost:${conductor.jetty.server.port}
      retryable: true
      strip-prefix: false
    conductor-swagger-js:
      path: /swagger-ui.js
      url: http://localhost:${conductor.jetty.server.port}
      retryable: true
      strip-prefix: false
    conductor-api:
      path: /api/**
      url: http://localhost:${conductor.jetty.server.port}
      retryable: true
      strip-prefix: false

api:
  security:
    resource:
      mapping: |
        [
          {
            "endpoint": "/api/event/**",
            "http_methods": [
              "POST",
              "PUT",
              "DELETE"
            ],
            "roles": [
              "role_conductor_super_manager", "role_conductor_core_manager", "role_conductor_execution_manager", "role_conductor_event_manager"
            ]
          },
          {
            "endpoint": "/api/event/**",
            "http_methods": [
              "GET"
            ],
            "roles": [
              "role_conductor_super_manager", "role_conductor_super_manager", "role_conductor_super_viewer","role_conductor_core_manager", "role_conductor_execution_manager", "role_conductor_event_manager", "role_conductor_core_viewer", "role_conductor_execution_viewer", "role_conductor_event_viewer"
            ]
          },
          {
            "endpoint": "/api/workflow/**",
            "http_methods": [
              "POST",
              "PUT",
              "DELETE"
            ],
            "roles": [
              "role_conductor_super_manager", "role_conductor_core_manager", "role_conductor_execution_manager", "role_conductor_workflow_manager"
            ]
          },
          {
            "endpoint": "/api/workflow/**",
            "http_methods": [
              "GET"
            ],
            "roles": [
              "role_conductor_super_manager", "role_conductor_super_viewer","role_conductor_core_manager", "role_conductor_execution_manager", "role_conductor_workflow_manager", "role_conductor_core_viewer", "role_conductor_execution_viewer", "role_conductor_workflow_viewer"
            ]
          },
          {
            "endpoint": "/api/tasks/**",
            "http_methods": [
              "POST",
              "PUT",
              "DELETE"
            ],
            "roles": [
              "role_conductor_super_manager", "role_conductor_core_manager", "role_conductor_execution_manager", "role_conductor_task_manager"
            ]
          },
          {
            "endpoint": "/api/tasks/**",
            "http_methods": [
              "GET"
            ],
            "roles": [
              "role_conductor_super_manager", "role_conductor_super_viewer","role_conductor_core_manager", "role_conductor_execution_manager", "role_conductor_task_manager", "role_conductor_core_viewer", "role_conductor_execution_viewer", "role_conductor_task_viewer"
            ]
          },
          {
            "endpoint": "/api/metadata/**",
            "http_methods": [
              "POST",
              "PUT",
              "DELETE"
            ],
            "roles": [
              "role_conductor_super_manager", "role_conductor_core_manager", "role_conductor_metadata_manager"
            ]
          },
          {
            "endpoint": "/api/metadata/**",
            "http_methods": [
              "GET"
            ],
            "roles": [
              "role_conductor_super_manager", "role_conductor_super_viewer","role_conductor_core_manager", "role_conductor_metadata_manager", "role_conductor_core_viewer", "role_conductor_metadata_viewer"
            ]
          }
        ]

oauth:
  embedded: false
  
security:
  oauth2:
    client:
      client-id: OVERALL_SUPER_ADMIN_APP
      client-secret: password
    resource:
      token-info-uri: http://${AAASERVER_HOST}:${AAASERVER_PORT}/oauth/check_token